{
	"version": "2",
	"templates": [{
			"type": 1,
			"title": "Hello-World",
			"description": "Hello-World, Template Type 1 (Container)",
			"note": "Small Hello-World Image, useful for Testing Portainer. Deploys a single container.<h4><span class=\"label label-warning image-tag ng-scope\">You are on the development container registry! Images from this registry are not for production use!</span></h4>",
			"categories": ["UC20-WL2000", "IOT-GW30", "Debug"],
			"platform": "linux",
			"image": "hello-world",
			"registry": "wmucdev.azurecr.io",
			"name": "hello-world"
		},
		{
			"type": 3,
			"title": "Hello-World Stack",
			"description": "Hello-World, Template Type 3 (Compose)",
			"note": "Small Hello-World Image, useful for Testing Portainer. Deploys a stack from a compose file.<h4><span class=\"label label-warning image-tag ng-scope\">You are on the development container registry! Images from this registry are not for production use!</span></h4>",
			"categories": ["UC20-WL2000", "IOT-GW30", "Debug"],
			"platform": "linux",
			"repository": {
				"url": "https://github.com/weidmueller/uc-container-templates",
				"stackfile": "stacks/hello-world/dev/1.0/docker-compose.yml"
			}
		},
		{
			"type": 3,
			"title": "Azure IoT Edge",
			"description": "Azure IoT Edge Runtime",
			"note": "Deploys the runtime for Azure IoT Edge 1.1 on Debian Buster. <h4><span class=\"label label-warning image-tag ng-scope\">You are on the development container registry! Images from this registry are not for production use!</span></h4>",
			"categories": ["UC20-WL2000", "IOT-GW30", "Azure"],
			"platform": "linux",
			"logo": "https://raw.githubusercontent.com/weidmueller/uc-container-templates/master/logos/azure-iot-edge-beta.svg",
			"repository": {
				"url": "https://github.com/weidmueller/uc-container-templates",
				"stackfile": "stacks/azure-iot-edge/dev/1.0/docker-compose.yml"
			},
			"env": [{
				"name": "DEVICE_CONNECTION_STR",
				"label": "Device Connection String",
				"description": "Obtain an Azure IoT Hub device connection string by registering a new device in the Azure Device Explorer."
			}, {
				"name": "LOGGING_DRIVER",
				"label": "Logging",
				"description": "Enable logging for testing or debugging. Logs are written to RAM using journald as default, since writing persistent logs to flash contributes to flash wear.",
				"select": [{
						"text": "persistent (local)",
						"value": "local"
					}, {
						"text": "RAM only (journald)",
						"value": "journald",
						"default": true
					},
					{
						"text": "disabled",
						"value": "none"
					}
				]
			}]
		},
		{
			"type": 3,
			"title": "Node-RED for u-create web",
			"description": "Flow-based programming tool",
			"note": "This distribution of Node-RED includes Weidmüller's iodata nodes to access global variables.<h4><span class=\"label label-warning image-tag ng-scope\">You are on the development container registry! Images from this registry are not for production use!</span></h4>",
			"categories": ["UC20-WL2000", "IOT-GW30"],
			"platform": "linux",
			"logo": "https://raw.githubusercontent.com/weidmueller/uc-container-templates/master/logos/node-red-beta.svg",
			"repository": {
				"url": "https://github.com/weidmueller/uc-container-templates",
				"stackfile": "stacks/wm-node-red/dev/1.0/docker-compose.yml"
			},
			"env": [{
				"name": "PORT",
				"label": "Web Server Port",
				"description": "The TCP port that the Node-RED web server is listening on.",
				"default": "1881"
			}, {
				"name": "LOGGING_DRIVER",
				"label": "Logging",
				"description": "Enable logging for testing or debugging. Logs are written to flash and contribute to flash wear.",
				"select": [{
							"text": "persistent (local)",
							"value": "local"
						}, {
							"text": "RAM only (journald)",
							"value": "journald",
							"default": true
						},
						{
							"text": "disabled",
							"value": "none"
						}
					]
			}]
		},
		{
			"type": 3,
			"title": "TeamViewer IoT Agent & Connector for u-create web",
			"description": "Publish u-control global variables to the TeamViewer IoT Service",
			"note": "Deploys a stack comprised of the TeamViewer IoT Agent and a Connector App to publish u-control global variables as TeamViewer metrics. <br>Please read and accept the <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.teamviewer.com/en/eula/\"><b>TeamViewer EULA</b></a>.<h4><span class=\"label label-warning image-tag ng-scope\">You are on the development container registry! Images from this registry are not for production use!</span></h4>",
			"logo": "https://raw.githubusercontent.com/weidmueller/uc-container-templates/master/logos/teamviewer-iot-beta.svg",
			"categories": ["UC20-WL2000", "TeamViewer"],
			"platform": "linux",
			"repository": {
				"url": "https://github.com/weidmueller/uc-container-templates",
				"stackfile": "stacks/teamviewer/dev/1.0/docker-compose.yml"
			},
			"env": [{
					"name": "ACCEPT_EULA",
					"label": "Accept TeamViewer EULA",
					"description": "Please accept the TeamViewer EULA to use the Teamviewer IoT Agent.",
					"select": [{
							"text": "Yes, I've read and accept the TeamViewer EULA",
							"value": "YES"
						},
						{
							"text": "No, I do not accept the TeamViewer EULA",
							"value": "NO",
							"default": true
						}
					]
				}, {
					"name": "ASSIGNMENT_API_TOKEN",
					"label": "TeamViewer IoT Assignment Token",
					"description": "The assignment token must be obtained from the TeamViewer IoT Management Console."
				},
				{
					"name": "ASSIGNMENT_GROUP_NAME",
					"label": "TeamViewer IoT Assignment Group Name",
					"description": "The device will be assigned to this group in the TeamViewer IoT Device Inventory."
				},
				{
					"name": "HOSTNAME",
					"label": "Device Name",
					"description": "The device will be registered in the TeamViewer IoT Device Inventory under this name.",
					"default": "Weidmüller IoT Device"
				},
				{
					"name": "SENSOR_NAME",
					"label": "TeamViewer Sensor Name",
					"description": "Name of the sensor under which the metrics of this device are published. If left empty, a default name is generated."
				},
				{
					"name": "UPDATE_INTERVAL",
					"label": "Update Interval",
					"description": "Metrics are published periodically at this interval.",
					"select": [{
							"text": "1s",
							"value": "1000"
						},
						{
							"text": "2s",
							"value": "2000"
						}, {
							"text": "5s",
							"value": "5000",
							"default": true
						}, {
							"text": "10s",
							"value": "10000"
						}, {
							"text": "1m",
							"value": "60000"
						}, {
							"text": "10m",
							"value": "600000"
						}
					]
				},
				{
					"name": "VAR_PREFIX",
					"label": "Filter Global Variables by Prefix",
					"description": "Only global variables starting with this prefix are published as metrics. Leave empty to publish all global variables."
				}, {
					"name": "LOGGING_DRIVER",
					"label": "Logging",
					"description": "Enable logging for testing or debugging. Logs are written to RAM using journald as default, since writing persistent logs to flash contributes to flash wear.",
					"select": [{
							"text": "persistent (local)",
							"value": "local"
						}, {
							"text": "RAM only (journald)",
							"value": "journald",
							"default": true
						},
						{
							"text": "disabled",
							"value": "none"
						}
					]
				}
			]
		},
		{
			"type": 1,
			"title": "TeamViewer IoT Agent",
			"description": "Deploys the TeamViewer IoT Agent standalone, e.g. on IOT-GW30",
			"note": "Deploys the TeamViewer IoT Agent standalone. Multiple Sensors or Connectors might connect to this agent. <br>Please read and accept the <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.teamviewer.com/en/eula/\"><b>TeamViewer EULA</b></a>.<h4><span class=\"label label-warning image-tag ng-scope\">You are on the development container registry! Images from this registry are not for production use!</span></h4>",
			"categories": ["UC20-WL2000", "IOT-GW30", "TeamViewer"],
			"restart_policy": "unless-stopped",
			"platform": "linux",
			"logo": "https://raw.githubusercontent.com/weidmueller/uc-container-templates/master/logos/teamviewer-iot-beta.svg",
			"image": "tviot-agent:2.14.13-1.0-alpha.1",
			"registry": "wmucdev.azurecr.io",
			"name": "teamviewer-agent",
			"env": [{
					"name": "ACCEPT_EULA",
					"label": "Accept TeamViewer EULA",
					"description": "Please accept the TeamViewer EULA to use the Teamviewer IoT Agent.",
					"select": [{
							"text": "Yes, I've read and accept the TeamViewer EULA",
							"value": "YES"
						},
						{
							"text": "No, I do not accept the TeamViewer EULA",
							"value": "NO",
							"default": true
						}
					]
				}, {
					"name": "ASSIGNMENT_API_TOKEN",
					"label": "TeamViewer IoT Assignment Token",
					"description": "The assignment token must be obtained from the TeamViewer IoT Management Console."
				},
				{
					"name": "ASSIGNMENT_GROUP_NAME",
					"label": "TeamViewer IoT Assignment Group Name",
					"description": "The device will be assigned to this group in the TeamViewer IoT Device Inventory."
				},
				{
					"name": "HOSTNAME",
					"label": "Device Name",
					"description": "The device will be registered in the TeamViewer IoT Device Inventory under this name.",
					"default": "Weidmüller IoT Device"
				}, {
					"name": "SERIAL_NUMBER_DOCKER_CONTAINER",
					"default": "wm-tviot-agent",
					"preset": true
				}, {
					"name": "ENABLE_APP_CONTROL",
					"default": 1,
					"preset": true
				}, {
					"name": "APP_CONTROL_PORT",
					"default": 80,
					"preset": true
				}, {
					"name": "APP_CONTROL_URL_SUFFIX",
					"default": "",
					"preset": true
				}, {
					"name": "APP_CONTROL_NAVIGATION_PANEL",
					"default": 0,
					"preset": true
				}, {
					"name": "ENABLE_REMOTE_TERMINAL",
					"default": 0,
					"preset": true
				}, {
					"name": "ENABLE_APP_CONNECTED",
					"default": 0,
					"preset": true
				}, {
					"name": "APP_CONNECTED_ALLOWED_PORTS",
					"default": 443,
					"preset": true
				}, {
					"name": "LOGGING_DRIVER",
					"label": "Logging",
					"description": "Enable logging for testing or debugging. Logs are written to RAM using journald as default, since writing persistent logs to flash contributes to flash wear.",
					"select": [{
							"text": "persistent (local)",
							"value": "local"
						}, {
							"text": "RAM only (journald)",
							"value": "journald",
							"default": true
						},
						{
							"text": "disabled",
							"value": "none"
						}
					]
				}
			],
			"network": "host",
			"volumes": [{
				"tviot-persistent": "/tviot"
			}]
		}, {
			"type": 3,
			"title": "Eclipse Mosquitto",
			"description": "Open-source MQTT Broker",
			"note": "Deploys the open-source MQTT Broker Eclipse Mosquitto from <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://hub.docker.com/_/eclipse-mosquitto\">Docker Hub</a>.<h4><span class=\"label label-info image-tag ng-scope\">This container image is maintained by a 3rd party and provided through Docker Hub.</span></h4>",
			"categories": ["UC20-WL2000", "IOT-GW30"],
			"platform": "linux",
			"logo": "https://raw.githubusercontent.com/psten/uc-container-templates/master/logos/eclipse-mosquitto-hub.svg",
			"repository": {
				"url": "https://github.com/psten/uc-container-templates",
				"stackfile": "stacks/eclipse-mosquitto/dev/1.0/docker-compose.yml"
			},
			"env": [{
				"name": "PORT",
				"label": "MQTT Port",
				"description": "The TCP port that the MQTT server is listening on. You can specify multiple ports like '1883 9001'.",
				"default": "1883"
			}, {
				"name": "LOGGING_DRIVER",
				"label": "Logging",
				"description": "Enable logging for testing or debugging. Logs are written to flash and contribute to flash wear.",
				"select": [{
						"text": "persistent (local)",
						"value": "local"
					}, {
						"text": "RAM only (journald)",
						"value": "journald",
						"default": true
					},
					{
						"text": "disabled",
						"value": "none"
					}
				]
			}]
		}, {
			"type": 3,
			"title": "PROCON-WEB ES (Embedded Systems)",
			"description": "Deploys the C++ based Runtime for PROCON-WEB",
			"note": "Deploys the C++ based Runtime for PROCON-WEB.<h4><span class=\"label label-warning image-tag ng-scope\">This is a development preview from a private Weidmüller GTI container registry! Images from this registry are not for production use!</span></h4>",
			"categories": ["UC20-WL2000", "IOT-GW30"],
			"platform": "linux",
			"logo": "https://www.gti.de/wp-content/uploads/2013/08/Procon-Web1-300x207.png",
			"repository": {
				"url": "https://github.com/weidmueller/uc-container-templates",
				"stackfile": "stacks/procon-web-es/dev/1.0/docker-compose.yml"
			},
			"env": [{
				"name": "LOGGING_DRIVER",
				"label": "Logging",
				"description": "Enable logging for testing or debugging. Logs are written to flash and contribute to flash wear.",
				"select": [{
						"text": "persistent (local)",
						"value": "local"
					}, {
						"text": "RAM only (journald)",
						"value": "journald",
						"default": true
					},
					{
						"text": "disabled",
						"value": "none"
					}
				]
			}]
		}
	]
}